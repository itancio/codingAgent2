app.ts
    getChangesPerFile(payload)              2
    handlePullRequestOpened                 1

review.ts
    applyReview
    getGitFile                              3b
    getFileContents
    commentIssue
    createBranch
    -postGeneralReviewComment
    -postInlineComment
    -addLineNumbers


review-agents.ts
    logPRInfo
    reviewDiff
    reviewFiles
    dedupSuggestions
    reviewChanges
    generateInlineComments                  3c
    processPullRequest                      3

    -filterFile
    -groupFilesByExtension
    -processWithinLimitFiles
    -stripRemovedLines
    -processOutsideLimitFiles
    -processXMLSuggestions                  4a1
    -generateGithubIssueUrl                 4b1
    -convertPRSuggestionToComment           4b
    -xmlResponseBuilder                     4a
    -curriedXmlResponseBuilder              4
    -basicResponseBuilder
    -indentCodeFix
    -preprocessFile                         3a
    -reviewChangesRetry


prompts.ts
    REVIEW_DIFF_PROMPT
    XML_PR_REVIEW_PROMPT
    PR_SUGGESTION_TEMPLATE
    buildSuggestionPrompt
    buildPatchPrompt
    getReviewPrompt
    getXMLReviewPrompt                      3d
    constructPrompt
    getTokenLength
    isConversationWithinLimit

constants.ts
    @ PRFILE
    @ Builders
    @ PatchInfo
    @ PRSuggestion
    @ CodeSuggestion
    @ ChatMessage
    @ Review
    @ BranchDetails
    @ EnclosingContext
    @ AbstractParser
    EXTENSIONS_TO_PARSERS

    sleep
    processGitFilepath
    getParserForExtension
    assignLineNumbers


PAYLOAD STRUCTURE
payload:
    pull_request:
    repository:
        name:
        owner:
            login:



### Step-by-Step Call Stack: Starting from `handlePullRequestOpened` in `app.ts`

From the provided files, I'll outline the function call stack when `handlePullRequestOpened` is triggered. Since `handlePullRequestOpened` directly isn't visible, I will infer its logic from context and the main `processPullRequest` function in `app.ts`.

---

#### **1. Entry Point: `handlePullRequestOpened`**
- This function is invoked when a Pull Request (PR) is opened. 
- It likely parses PR metadata (e.g., `files`, `payload`, etc.) and initiates the review process by calling `processPullRequest`.

---

#### **2. `processPullRequest` in `app.ts`**
##### Purpose:
Handles the logic for processing pull request files. This involves:
1. Preprocessing files.
2. Reviewing changes.
3. Optionally generating inline suggestions.

##### Key Steps:
1. **Filter Files**:
   ```typescript
   const filteredFiles = files.filter((file) => filterFile(file));
   ```
   Filters PR files to process only relevant ones.

2. **Preprocess Files**:
   ```typescript
   await Promise.all(filteredFiles.map((file) => preprocessFile(octokit, payload, file)));
   ```
   Calls `preprocessFile` for each filtered file to fetch its old and new contents from the repository.

3. **Review Changes**:
   Depending on `includeSuggestions`, reviews files with `reviewChangesRetry`.

4. **Return Results**:
   Returns a summary of the review and suggestions.

---

#### **3. `preprocessFile` in `app.ts`**
##### Purpose:
Fetches file contents (old and current versions) for the specified PR file.

##### Steps:
1. Fetches file contents using:
   ```typescript
   getGitFile(octokit, payload, baseBranch, file.filename)
   ```
   Retrieves the file content from the base and current branches.
2. Assigns the contents to the `PRFile` object:
   ```typescript
   file.old_contents = String.raw`${oldContents.content}`;
   file.current_contents = String.raw`${currentContents.content}`;
   ```

---

#### **4. `reviewChangesRetry` in `app.ts`**
##### Purpose:
Attempts to review changes using different builders until successful.

##### Steps:
1. Loops through multiple `Builders`:
   ```typescript
   for (const {convoBuilder, responseBuilder} of builders) {
       return await reviewChanges(traceTag, files, convoBuilder, responseBuilder, model);
   }
   ```

2. Handles errors and retries with the next builder if the previous one fails.

---

#### **5. `reviewChanges` in `reviews.ts`**
##### Purpose:
Analyzes PR file changes and groups files for reviewing.

##### Steps:
1. **Filter and Tokenize Files**:
   Filters files and calculates their token lengths.
   ```typescript
   filteredFiles.map((file) => file.patchTokenLength = getTokenLength(patchBuilder(file)));
   ```

2. **Group Files by Size**:
   Splits files into:
   - **Within Model Limit**: Files that can fit in the model’s token context.
   - **Exceeding Model Limit**: Files too large for a single context.

3. **Process Each Group**:
   Processes groups of files and generates feedback:
   ```typescript
   const feedbacks = await Promise.all(groups.map((patchGroup) => reviewFiles(traceTag, patchGroup, model, patchBuilder, convoBuilder)));
   ```

---

#### **6. `reviewFiles` in `reviews.ts`**
##### Purpose:
Performs the actual review for a group of files.

##### Steps:
1. Constructs a conversation prompt using `patchBuilder` and `convoBuilder`.
   ```typescript
   const convo = constructPrompt(files, patchBuilder, convoBuilder);
   ```
2. Sends the prompt to the AI model and processes its response.

---

#### **7. `constructPrompt` in `prompts.ts`**
##### Purpose:
Builds a prompt for reviewing a group of files.

##### Steps:
1. Maps over files to build their patches.
   ```typescript
   const patches = files.map((file) => patchBuilder(file));
   ```
2. Joins patches into a single diff.
3. Uses `convoBuilder` to generate a formatted prompt.

---

#### **8. AI Interaction (`chatFns`)**
##### Purpose:
Generates review responses using the AI model.

##### Steps:
1. Calls an AI function (e.g., `chatFns`) with the prompt.
2. Parses and returns feedback or suggestions.

---

#### **Supporting Components**
1. **`JavascriptParser` in `javascript-parser.ts`**:
   - Used to find enclosing contexts for inline comments.
   - Analyzes file contents with Babel for tokenization and context extraction.

2. **`filterFile`, `getGitFile`, `getTokenLength`**:
   - Utility functions for filtering, fetching file content, and calculating token lengths.

3. **Logging**:
   - Logs execution details (e.g., file counts, errors) for debugging.

---

### Call Stack Summary
1. **`handlePullRequestOpened`** (entry point):
   - Calls `processPullRequest`.
2. **`processPullRequest`**:
   - Filters files, preprocesses them, and reviews changes.
3. **`preprocessFile`**:
   - Fetches old and new file contents.
4. **`reviewChangesRetry`**:
   - Attempts review using multiple strategies.
5. **`reviewChanges`**:
   - Groups files and generates feedback.
6. **`reviewFiles`**:
   - Reviews grouped files using AI prompts.
7. **`constructPrompt`**:
   - Builds conversation prompts for the AI.
8. **AI Functions (`chatFns`)**:
   - Generates and returns feedback for PR files. 

Let me know if you’d like detailed insights into any specific function or workflow!



{
  "action": "opened",
  "number": 1,
  "pull_request": {
    "id": 123456789,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTIzNDU2Nzg5",
    "url": "https://api.github.com/repos/owner/repo/pulls/1",
    "html_url": "https://github.com/owner/repo/pull/1",
    "diff_url": "https://github.com/owner/repo/pull/1.diff",
    "patch_url": "https://github.com/owner/repo/pull/1.patch",
    "issue_url": "https://api.github.com/repos/owner/repo/issues/1",
    "number": 1,
    "state": "open",
    "locked": false,
    "title": "Update the README with new information",
    "user": {
      "login": "octocat",
      "id": 1,
      "node_id": "MDQ6VXNlcjE=",
      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "html_url": "https://github.com/octocat",
      "followers_url": "https://api.github.com/users/octocat/followers",
      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
      "organizations_url": "https://api.github.com/users/octocat/orgs",
      "repos_url": "https://api.github.com/users/octocat/repos",
      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/octocat/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Please pull these awesome changes in!",
    "created_at": "2019-05-15T15:20:30Z",
    "updated_at": "2019-05-15T15:20:30Z",
    "closed_at": null,
    "merged_at": null,
    "merge_commit_sha": "e5bd3914e2e596debea16f433f57875b5b90bcd6",
    "assignee": null,
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "labels": [],
    "milestone": null,
    "commits_url": "https://api.github.com/repos/owner/repo/pulls/1/commits",
    "review_comments_url": "https://api.github.com/repos/owner/repo/pulls/1/comments",
    "review_comment_url": "https://api.github.com/repos/owner/repo/pulls/comments{/number}",
    "comments_url": "https://api.github.com/repos/owner/repo/issues/1/comments",
    "statuses_url": "https://api.github.com/repos/owner/repo/statuses/{sha}",
    "head": {
      "label": "octocat:changes",
      "ref": "changes",
      "sha": "d474d0b9b5fc4e1d9f08a290a5342b1e2e3884f1",
      "user": {
        "login": "octocat",
        "id": 1
      },
      "repo": {
        "id": 1296269,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
        "name": "Hello-World",
        "full_name": "octocat/Hello-World"
      }
    },
    "base": {
      "label": "octocat:master",
      "ref": "master",
      "sha": "c1a4147b2ee1a2a2de2d2b3dd99c19d7d4e637f4",
      "user": {
        "login": "octocat",
        "id": 1
      },
      "repo": {
        "id": 1296269,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
        "name": "Hello-World",
        "full_name": "octocat/Hello-World"
      }
    }
  },
  "repository": {
    "id": 1296269,
    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
    "name": "Hello-World",
    "full_name": "octocat/Hello-World"
  },
  "sender": {
    "login": "octocat",
    "id": 1
  }
}
